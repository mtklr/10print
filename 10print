#!/usr/bin/env bash
# "10 PRINT CHR$(205.5+RND(1)); : GOTO 10" - https://10print.org
# Some fonts work better than others. Menlo with -u looks good.

trap "cleanup" INT EXIT

# "strict mode"
set -eu -o pipefail

readonly me=${0##*/}

cols=$(tput cols)
lines=$(tput lines)
state=$(stty -g)

usage () {
	cat <<EOF >&2
usage: $me [option ...]
10 PRINT CHR\$(205.5+RND(1)); : GOTO 10

options:
  -a  alternate character set
  -c  color (256 color terminal)
  -g  grayscale (256 color terminal)
  -h  show this help and exit
  -l  large output
  -m  medium output
  -p  pause after each screenful of output, \`q' quits
  -u  unicode
EOF
}

cleanup () {
	[ "$charset" = "acs" ] && tput rmacs
	tput cnorm
	stty "$state"
	[ "$clearscreen" -eq 1 ] && clear
	exit
}

rand_color () {
	# 256 colors
	local r=$((RANDOM % 213 + 17))

	printf '\e[0;38;5;%im' "$r"

	# 8/16 color
	# bright may be just be "bold" in some terminals
	# local b=31
	# [[ $((RANDOM % 2)) -eq 1 ]] && b=91
	# printf '\e[%im' $(( RANDOM % 7 + b ))
}

rand_gray () {
	local r=$((RANDOM % 24 + 232))

	printf '\e[0;38;5;%im' "$r"
}

print_char () {
	local c

	[ "$color" -eq 1 ] && rand_color
	[ "$gray" -eq 1 ] && rand_gray

	case $1 in
		acs )
			c=106
			[ $((RANDOM % 2)) -eq 1 ] && c=116
			printf '%b' "$(printf '\\%o' $((c + (RANDOM % 5))))"
			;;
		uni )
			c='\0342\0225\026'
			printf '%b' "$c$((RANDOM % 2 + 1))"
			;;
		  * )
			c='/'
			[ $((RANDOM % 2)) -eq 1 ] && c=\\
			printf '%c' "$c"
			;;
	esac
}

print () {
	local c
	local line

	line="$(for (( c=0; c<cols; c++ )); do
			print_char "$charset"
		done)"

	case $1 in
		l ) printf '\e#3%s\n\r\e#4%s' "$line" "$line" ;;
		m ) printf '\e#6%s' "$line" ;;
		s ) printf '%s' "$line" ;;
	esac
}

# options
charset=ascii
clearscreen=1
color=0
gray=0
pause=0
size=s

while getopts ":acghlmpu" opt; do
	case $opt in
		a ) charset=acs; tput smacs ;;
		c ) color=1; gray=0 ;;
		g ) color=0; gray=1 ;;
		h ) clearscreen=0; usage; exit 0 ;;
		l ) size=l ;;
		m ) size=m ;;
		p ) pause=1 ;;
		u ) charset=uni ;;
		? ) clearscreen=0; usage; exit 1 ;;
	esac
done

shift $((OPTIND - 1))

stty raw -echo -icanon min 0
tput civis

# fill screen and pause
if [ "$pause" -eq 1 ]; then
	while :; do
		for (( i=0; i<lines; i++ )); do
			if [ "$i" -lt "$lines" ]; then
				printf '\n\r'
			else
				printf '\r'
			fi

			if [ "$size" = "l" ]; then
				print "$size"
				(( i++ ))
			else
				print "$size"
			fi

		done

		read -n1 -rs a
		[ "$a" = "q" ] && exit
	done
fi

# continuous
while ! IFS=$'\n' read -rs a; do
	[ "$a" != "" ] && break

	if [ "$size" != "s" ]; then
		printf '\n\r'
	fi

	print "$size"
done

exit
